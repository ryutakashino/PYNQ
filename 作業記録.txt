./sandbox以下に記録します。
/etc/network/interfaces.d/static以外は触っていません。

おそらく、パソコンとLAN直繋ぎで192.168.2.99になるかと思います。基本的にパスワードはxilinxです。

PynqとMacのファイル共有を行いました。
PYNQとMacのsmbによるファイル共有。Finder->移動->サーバに接続->smb://192.168.2.99とuser:pass=xilinx:xilinxで繋がる。


----------
以下のドキュメントの写経をしました。
http://pynq.readthedocs.io/en/latest/0_whats_new.html


-Jupyter Notebook Introduction.ipynb
jupyterのやり方

-Cortex-A9 programming in Python.ipynb
幾つかのpythonプログラム

-Programming PYNQ-Z1’s onboard peripherals.ipynb
ようやくボタンとかLEDとか

---------
色々ためしてみました。

-Led_brink.ipynb
LEDの点灯をもとにmmio.pyについて調べる。

-PL.ipynb(未完成)
おそらくｐｌ.pyがOverlay関係の操作に関わっている。独自にbiｔファイルとtclファイルを作成、デフォルトのOverlayを書き換えてみる予定だったが、間に合わなかった。

-WebCamera.ipynb
持っていたWebカメラをUSB　HOSTに挿して、サンプルプログラムに従うと簡単に動いた。

-VivadoとかSDSocとかについて.txt
FPGAを実装するソフトとしてVivadoとかVivadoHLSとかSDK,SDSocとかあるらしいけど、どれで何ができるか調べてみた。自分で動かしたことがないから、不正確なところがあることは否定出来ない。SDSocはCコードとハード化する部分の指定があれば全部やってくれるすごいフレンズなんだね。

----------
コメント

まとめ。デフォルトの回路ではPL（FPGA）とのPS（Linux）のデータは/dev/memを介してやり取りされる。読み取む回路ファイル（bitファイル）の変更はいくつかのデバイスファイルを書き換えることで実現できると思われる。ちなみにデフォルトの回路はブート時に自動で読み込まれる。
mmio.pyが/dev/memの変更に関わっている。また、pl.pyが特定のデバイスファルを書き換えOverlayの変更を可能にしていると思われる。
mmio.pyは確認済みであるが、pl.pyは未確認である。

中原先生はTensorflowのPythonコードからCコードを自動生成するシステムを開発したから、そのCコードをSDSocさんに食べさせれば、実質的にPythonからFPGAの合成ができるようになったということなのかな。

PynqではFPGAの回路の書き換えはできるけど、新たな回路の作成は出来ない。新たな回路の作成はVivadoなりSDSocなりを使う必要があるのだ。いくつかの回路を予め準備しておいて、pythonがpl.pyを用いてFPGAへ渡す回路情報を取り替えることで、回路が書き換わる。「PynqがFPGA回路の書き換える」は正確でない、「PynqがFPGA回路の取り換える」という表現が適切だろう。Pynqのすごいところは、Overlayという形にすることでソフトとハードの境界を気にせず、ライブラリ感覚であつかえることだ。

PythonでVerilogに論理合成でき、VivadoでFPGAに落とし込めたとしても、Linux側からそのFPGAへ入力を渡したり、結果を受け取るためのドライバを書かないといけないのか。それならCに変換してSDSocを使えば、ソフトとハードの境界を気にしなくて良くなり手間がかからなくなるのか。おそらく。


