用語
IP(Intellectual Property)：Verilogで記述したり、C/C++の高位合成を経るなどによって生成され、完成した機能ブロック。ライブラリのようなもの。
FPGAコンフィグレーション：FPGA上に回路を構成すること
HDL(Hardware Description Language):ハードウェアの動作と接続を記述するプログラミング言語。VerilogとVHDLが業界標準として広まっている。
RTL(Register Transfer Level)：記述の抽象度を表す。ドランジスタレベルよりは上で、レジスタ間のデータ転送と論理演算の組み合わせを記述する。


XilinxFPGA開発ツール郡をインストールした。だいぶ重いソフトである。

XilinxFPGA開発ツール郡:Vivado Design Suiteは
・統合開発環境:Vivado（８Gほど）
・ソフトウェア開発環境:Xilinx SDK（しらない）
・高位合成ツール:Vivado HLS（1.5Gほど）
などからなる。

Vivado
　回路記述(HDL)やIP(すごい人が創った回路の完成品。ライブラリのようなもの。自分でも作れる)を組み合わせて、論理合成を行い配置配線を経て、bit(bitstream)ファイル(回路情報を含むファイル)を生成することができる。 bitファイルのFPGAコンフィグレーション(回路情報を書き込む)もVivadoで行うことができる。

Xilinx SDK
 ハードマクロCPU（実際にCPUが実装されている）やソフトマクロCPU（FPGA内でCPUを創りだしてしまう。そのCPUをMicoroBlazeという）によりFPGAとCPUが合わさったボードのソフトウェア側をプログラミングするためのソフトウェア。MicroBlaze/ARMコア用のC/C++のコンパイルとリンクが可能。Vivadoで生成したbitファイルとこのソフトで生成したプログラムを統合、CPU付きFPGAボードにコンフィグレーションすることが出来る。

VivadoHLS
　C/C++から高位合成を行いIPを作る事ができる。このソフトで作ったIPをVivadoで他の回路と結合して、bitファイルを生成する。VivadoHLSは単体で使うというより、Vivadoと合わせて用いる。



全てRTL設計で書くわけにいかないので、過去の完成品をIP化したものを流用したり、比較的抽象度の高い言語で記述し高位合成を経て生成したIPを用いるなど作業の効率化を図る。しかしながら、IPとIPの接続のために新たに回路をHDLでつくる必要に迫られることもある。さらにCPUとFPGAの、ソフト側とハード側のIPを繋げるドライバを書くのに数ヶ月も要することもあるのだとか。完成品を組み合わせれば、完成品が出来上がる訳ではないのだ。


SDSoc
そこで現れたのがSDSoc。実現したい全ての機能をC/C++言語でプログラムを書く。そして、SDSocを使って、指定した部分のコードをハードウェア化することが出来る。ソフト側とハード化した部分のドライバは自動で生成される。全体像をつくってから部分的にハード化するため開発が効率的に行える。SDSocは開発を始める前に対象のFPGA専用のSDSocプラットホームなるものを用意する必要がある。幾つかのボード(Zyboなど)に関しては、標準的にプラットホームが準備されており、直ぐに開発が行うことが出来る。しかし、Pynqは標準装備ではなく自分でプラットホームを作成する必要がある。

>SDSoCでは原則としてFPGAの内部は完全に遮蔽される。なので、「この部分はFPGAのSRAMのここに保管したい」とか「このブロックはDSPで処理したい」とかいうものがあっても、それを直接C/C++のコードで記述することはできず、先に書いたライブラリを介して行う必要があり、このためにはRTLのプログラミングが必須である。要するにSDSoCは、FPGAを完全にブラックボックス化するツールであるといえる。
http://news.mynavi.jp/articles/2015/03/12/xilinx_sdsoc/001.html



高位合成ツールVivadoHLSと高位合成ツールSDSocの違い。
VivadoHLSはC/C++から一つ一つの回路の部品をつくるためのもので、実装するためには別途組み合わせるためにVivadoでの作業を必要する。

>「Vivado HLS」で合成したハードウェアIPをCortex-A9プロセッサ上のソフトウェアから呼び出すには、デバイスドライバの作成やAPIの定義などが必要で、エンジニアが人手で作りこまなければなりません。また、合成したハードウェアIPと他のハードウェアブロックとのインターコネクトについてもエンジニアが人手で対応する必要があります。そうした付帯的な設計作業には、多くの工数が掛かってしまうのが実状でした。この課題に対してザイリンクスは、それらの作業を自動化する「SDSoC」という新しいツールを開発し、2015年7月から一般への提供を開始したところです
https://www.aps-web.jp/magazine/xilinx/v11/


SDSocは全部Cでつくってしまって、あとはHW化する部分をソフトに教えてやるだけで自動でやってくれる。

>SDSoCは、こうした「RTLが書けないエンジニア」にFPGAを使ってもらうための道具という位置づけになる(Photo04)。
...
具体的にはどんなフローになるか? といえば、まずC/C++を使って普通にシステムを作ることになる。次に実行しながらプロファイリングを行い、ボトルネックになっている部分をFPGA側に切り出して性能を評価、ある程度固まったところで完成という簡単なものだ
http://news.mynavi.jp/articles/2015/03/12/xilinx_sdsoc/


参考
Xilinxプログラミング大全
FPGAの原理と構成
